#
# A sample control file to exemplify the RTE and WF functionality.
#
# Run this control file and type in AMI:
#
#    f=read_artsvar('auto_full','f_mono');   
#    za=read_artsvar('auto_full','za_pencil'); 
#    y=read_artsvar('auto_full','y');   
#    plot(f/1e9,reshape(y,length(f),length(za))) 
#
# and you should see a set spectra showing the ClO cluster at 501.3 GHz
# and some ozone transitions. Note that absorption of N2 and H2O is not 
# included (N2 and H2O must be part of tgs as h2o_abs and n2_abs must 
# be set).
#
# A quick test of the species WFs are obtained by:
#
#    Kx=read_artsvar('auto_full','kx');   
#    plot(Kx(:,1:202)*ones(202,1)), hold on
#    plot(y,'r'), hold off
#
# The two lines shall be very close if everything is OK (they are not 
# identical due to non-linearity).
#
# The ASCII file format has been used here and the loading of Kx takes some
# time. Use the binary format if you have installed HDF and the reading
# and writing are quicker.


### Spectroscopy: ############################################################
tgsDefine { 
     [ "O3",
       "ClO",
       "N2",
       "H2O" ] 
}
wfs_tgsDefine { 
     [ "O3",
       "ClO" ] 
}
lineshapeDefine { 
   shape               = "Voigt_Kuntz6"
   normalizationfactor = "quadratic"
   cutoff              = -1 
} 
#
linesReadFromHitran { 
   filename = "@ac_arts_data@/spectroscopy/hitran96/hitran96_lowfreq.par"
   fmin     = 501e9
   fmax     = 502e9 
}
lines_per_tgCreateFromLines {
}  
#
cont_descriptionInit{
}


### Load an atmosphere ########################################################
MatrixReadAscii (raw_ptz) { 
   "@ac_arts_data@/atmosphere/fascod/midlatitude-winter.tz.aa" 
}
raw_vmrsReadFromScenario { 
   "@ac_arts_data@/atmosphere/fascod/midlatitude-winter" 
}


### Monochromatic frequency grid ##############################################
VectorNLinSpace ( f_mono ) { 
   start = 501.18e+9
   stop  = 501.58e+9
   n     = 401
}
VectorWriteAscii ( f_mono ) { 
   ""
}


### The geoid #################################################################
r_geoidStd{
}


### Vertical profiles #########################################################
VectorNLogSpace ( p_abs ) { 
   start = 1.013300e+05
   stop  = 0.0914023919463313
   n     = 101 
}
AtmFromRaw {}
h2o_absSet{
}
n2_absSet{
}


### Make sure that hydrostatic equilibrium ####################################
hseFromBottom {
   g0    = 9.81
   niter = 2 
}
hseCalc{
}


### Calculate absorption ######################################################
absCalc {
}
abs_per_tgReduce {
}


### The ground ################################################################
groundSet {
   z = 1e3
   e = 0.9
}


### Observation geometry ######################################################
NumericSet ( z_plat ) { 
   620e3 
}
VectorNLinSpace ( za_pencil ) { 
   start = 113
   stop  = 114.1
   n     = 11 
}
VectorWriteAscii ( za_pencil ) {
   ""
}
NumericSet ( l_step ) { 
   20e3 
}


### Cosmic radiation ##########################################################
y_spaceStd { 
   "cbgr" 
}


### Refraction ################################################################
refrSet {
  on    = 1
  model = "Boudouris"
  lfac  = 4
}
refrCalc {
}


### Emission ##################################################################
emissionOn {
}


### Line of sight (LOS) #######################################################
losCalc{
}
VectorWriteAscii ( z_tan ) {
   ""
}
sourceCalc {
}
transCalc {
}


### Calculate spectra #########################################################
yCalc {
}


### Calculate Kx ##############################################################

### Init ###
kxAllocate( y ) {
   ni = 4 
   nx = 224 
}

### Species ###
absloswfsCalc {
}
VectorCopy ( k_grid, p_abs ) {
}
kSpecies { 
   unit = "frac" 
}
kxPutInK {
}

### Pointing off-set ###
kPointingOffSet { 
   delta = 0.001 
}
kxPutInK {
}

### Temperature ###
VectorNLogSpace ( k_grid ) { 
   start = 1.013300e+05
   stop  = 0.0914023919463313
   n     = 21 
}
kTemp {
   hse  = 0
   fast = 1
}
kxPutInK {
}

### Convert to Rayleigh-Jean temperature ####################################
MatrixTRJ( kx, kx ) {
}

### Save ###
MatrixWriteAscii ( kx ) {
   ""
}  
ArrayOfIndexWriteAscii ( kx_lengths ) {
   ""
}  
MatrixWriteAscii ( kx_aux ) {
   ""
}  
ArrayOfStringWriteAscii ( kx_names ) {
   ""
}


### Conversion to Rayleigh-Jean temperature ##################################
yTRJ {
}


### Save spectra #############################################################
VectorWriteAscii ( y ) {
   ""
}


