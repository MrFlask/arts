#
# A sample control file to exemplify the functionality of 
# the weighting function for the spectroscopic parameters.
# 
# the output could be: 
#        1. weighting function for spectro parameters (*.k.aa)
#        2. name of the indentities (*.k_names.aa)
#        3. uncertainities in absolute (firs column) 
#           and relative values (second column) (*.S_S.aa)
#        4. correlation (*.Mcorr.aa). 
#        The level of correlation is specified in control file (correlation)
#        The parameters of all the lines corresponding to one species are 
#        assumed to be correlated, and no intercorrelation between different
#        spectro parameters or species.      
#
# A quick test of the spectro parameters WFs are obtained by:
#
#    Kb=read_artsvar('wfs_spectro_example','k');   
#    plot(Kb(:,1); hold on 
#    plot(y,'r'); hold off
#
# The ASCII file format has been used here and the loading of Kb takes some
# time. Use the binary format if you have installed HDF and the reading
# and writing are quicker.


### Spectroscopy: ############################################################
tgsDefine { 
     [ "O3",
       "ClO",
       "N2",
       "H2O" ] 
}
wfs_tgsDefine { 
     [ "O3",
       "ClO" ] 
}

# tags for which the spectro parameters should be calculated
wfss_tgsDefine { 
     [ "O3",
       "ClO" ] 
}


lineshapeDefine { 
   shape               = "Voigt_Kuntz6"
   normalizationfactor = "quadratic"
   cutoff              = -1 
} 
#
linesReadFromMytran2 { 
   filename = "@ac_arts_data@/spectroscopy/mytran/mytran98.my2"
   fmin     = 501e9
   fmax     = 502e9 
}
lines_per_tgCreateFromLines {
}  
#
cont_descriptionInit{
}


### Load an atmosphere ########################################################
MatrixReadAscii (raw_ptz) { 
   "@ac_arts_data@/atmosphere/fascod/midlatitude-winter.tz.aa" 
}
raw_vmrsReadFromScenario { 
   "@ac_arts_data@/atmosphere/fascod/midlatitude-winter" 
}


### Monochromatic frequency grid ##############################################
VectorNLinSpace ( f_mono ) { 
   start = 501.18e+9
   stop  = 501.58e+9
   n     = 401
}


### The geoid #################################################################
r_geoidStd{
}


### Vertical profiles #########################################################
VectorNLogSpace ( p_abs ) { 
   start = 1.013300e+05
   stop  = 0.0914023919463313
   n     = 101 
}
AtmFromRaw {}
h2o_absSet{
}
n2_absSet{
}


### Make sure that hydrostatic equilibrium ####################################
hseFromBottom {
   g0    = 9.81
   niter = 2 
}
hseCalc{
}


### Calculate absorption ######################################################
absCalc {
}
abs_per_tgReduce {
}


### The ground ################################################################
groundSet {
   z = 1e3
   e = 0.9
}


### Observation geometry ######################################################
NumericSet ( z_plat ) { 
   620e3 
}
VectorNLinSpace ( za_pencil ) { 
   start = 113
   stop  = 114.1
   n     = 11 
}
VectorWriteAscii ( za_pencil ) {
   ""
}
NumericSet ( l_step ) { 
   20e3 
}


### Cosmic radiation ##########################################################
y_spaceStd { 
   "cbgr" 
}


### Refraction ################################################################
refrSet {
  on    = 1
  model = "Boudouris"
  lfac  = 4
}
refrCalc {
}


### Emission ##################################################################
emissionOn {
}


### Line of sight (LOS) #######################################################
losCalc{
}
sourceCalc {
}
transCalc {
}


### Calculate spectra #########################################################
yCalc {
}


### Calculate Kx ##############################################################
absloswfsCalc{}
### Init ###
kbInit{}
### Calculating the weighting function ###
#
# in this example the weighting function is calculated
# for intensity (field set to 1) and agam (fiel set to 1) 
# A correlation of 0.5 is assumed.
#
kSpectro{ 
 	do_intens=1 
 	do_position=0
 	do_agam = 1
 	do_sgam = 0
 	do_nair = 0
 	do_nself=0
 	do_pSift=0
        correlation =.5
}

### Save monochromatic spectra and K #####################################

### Conversion to different temperature scales ###########################
yTRJ{}

# To convert Weighting function in the units of Brightness Temperature.
MatrixTRJ(k,k){}

### Save spectra ###########################################################
VectorWriteAscii( y ) {""}
VectorWriteAscii( f_mono ) {""}
VectorWriteAscii( za_pencil ) {""}


###Save Weighting function Matrix and indentity names#####
MatrixWriteAscii( k ){""}
ArrayOfStringWriteAscii(k_names){""}


### Save matrix keeping the error and correlation matrix.
# These are helpfull for the error analysis.
MatrixWriteAscii( S_S ) {""}
MatrixWriteAscii( Mcorr ){""}
